# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F16fbMB6AlOVo3t6xxjixJOv7SCkRlTH

Trabajo Practico N°2, Taller de Programacion
"""

import math

# Ejercicio 1: Mostrar la cantidad de dígitos de un número entero
def mostrar_cantidad_digitos():
    numero = int(input("Ingrese un número entero: "))
    cantidad_digitos = len(str(abs(numero)))
    print(f"Cantidad de dígitos: {cantidad_digitos}")

# Ejercicio 2: Mostrar la cantidad de dígitos enteros y decimales de un número decimal
def mostrar_cantidad_digitos_entero_decimal():
    numero = float(input("Ingrese un número decimal: "))
    entero, decimal = str(numero).split(".")
    cantidad_enteros = len(entero)
    cantidad_decimales = len(decimal)
    print(f"Cantidad de dígitos enteros: {cantidad_enteros}")
    print(f"Cantidad de dígitos decimales: {cantidad_decimales}")

# Ejercicio 3: Mostrar números compuestos de un vector
def es_compuesto(numero):
    divisores = 0
    for i in range(1, abs(numero) + 1):
        if numero % i == 0:
            divisores += 1
    return divisores > 2

def mostrar_numeros_compuestos():
    n = int(input("Ingrese la cantidad de números en el vector: "))
    vector = [int(input(f"Ingrese el número {i+1}: ")) for i in range(n)]
    compuestos = [num for num in vector if es_compuesto(num)]
    print("Números compuestos:", compuestos)

# Ejercicio 4a: Invertir un vector usando un vector auxiliar
def invertir_vector_con_auxiliar():
    n = int(input("Ingrese el tamaño del vector: "))
    vector = [int(input(f"Ingrese el valor del elemento {i+1}: ")) for i in range(n)]
    vector_aux = vector[::-1]
    print("Vector invertido usando un vector auxiliar:", vector_aux)

# Ejercicio 4b: Invertir un vector sin usar un vector auxiliar
def invertir_vector_sin_auxiliar():
    n = int(input("Ingrese el tamaño del vector: "))
    vector = [int(input(f"Ingrese el valor del elemento {i+1}: ")) for i in range(n)]

    for i in range(len(vector) // 2):
        vector[i], vector[len(vector)-i-1] = vector[len(vector)-i-1], vector[i]
    print("Vector invertido sin usar un vector auxiliar:", vector)

# Ejercicio 5: Filtrar elementos según condiciones de dígitos
def filtrar_elementos_por_digitos():
    n = int(input("Ingrese el tamaño de la lista A: "))
    lista_a = [float(input(f"Ingrese el número {i+1}: ")) for i in range(n)]
    lista_b = []

    for num in lista_a:
        entero = str(int(num))  # Parte entera del número
        pares = sum(1 for dig in entero if int(dig) % 2 == 0)
        impares = len(entero) - pares
        if pares == 2 and impares >= 2:
            lista_b.append(num)

    print("Lista B:", lista_b)

# Ejercicio 6: Insertar K a la derecha de cada múltiplo de K en una lista
def insertar_k_derecha_multiplo_k():
    lista = list(map(int, input("Ingrese los elementos del vector (separados por espacio): ").split()))
    k = int(input("Ingrese el valor de K: "))

    i = 0
    while i < len(lista):
        if lista[i] % k == 0:
            lista.insert(i + 1, k)
            i += 1
        i += 1

    print("Lista modificada:", lista)

# Ejercicio 7: Calcular promedios de cada fila y columna de una matriz
def calcular_promedios_matriz():
    m = int(input("Ingrese el número de filas (M): "))
    n = int(input("Ingrese el número de columnas (N): "))
    matriz = [list(map(int, input(f"Ingrese los elementos de la fila {i+1} (separados por espacio): ").split())) for i in range(m)]

    print("Matriz cargada:")
    for fila in matriz:
        print(fila)

    promedios_filas = [sum(fila) / len(fila) for fila in matriz]
    promedios_columnas = [sum(matriz[i][j] for i in range(m)) / m for j in range(n)]

    print("Promedios de las filas:", promedios_filas)
    print("Promedios de las columnas:", promedios_columnas)

# Ejercicio 8: Almacenar elementos cuya factorial sea mayor o igual a la suma de la diagonal principal
def almacenar_factorial_matriz():
    m = int(input("Ingrese el número de filas y columnas de la matriz (M): "))
    matriz = [list(map(int, input(f"Ingrese los elementos de la fila {i+1} (separados por espacio): ").split())) for i in range(m)]

    suma_diagonal = sum(matriz[i][i] for i in range(m))
    vector_resultado = []

    for i in range(m):
        for j in range(m):
            if math.factorial(matriz[i][j]) >= suma_diagonal:
                vector_resultado.append(matriz[i][j])

    vector_resultado = list(set(vector_resultado))  # Eliminar duplicados
    print("Vector resultado:", vector_resultado)

# Ejercicio 9: Verificar si un elemento es un punto silla
def es_punto_silla(matriz, k, h):
    if matriz[k][h] != max(matriz[k]):
        return False

    columna = [matriz[i][h] for i in range(len(matriz))]
    if matriz[k][h] != min(columna):
        return False

    return True

def verificar_punto_silla():
    m = int(input("Ingrese el número de filas (M): "))
    n = int(input("Ingrese el número de columnas (N): "))
    matriz = [list(map(int, input(f"Ingrese los elementos de la fila {i+1} (separados por espacio): ").split())) for i in range(m)]

    k = int(input("Ingrese la fila k (índice base 0): "))
    h = int(input("Ingrese la columna h (índice base 0): "))

    if es_punto_silla(matriz, k, h):
        print(f"El elemento A[{k}, {h}] es un punto silla.")
    else:
        print(f"El elemento A[{k}, {h}] no es un punto silla.")

# Ejercicio 10: Verificar si la matriz es simétrica
def es_matriz_simetrica():
    m = int(input("Ingrese el número de filas (M): "))
    n = int(input("Ingrese el número de columnas (N): "))
    matriz = [list(map(int, input(f"Ingrese los elementos de la fila {i+1} (separados por espacio): ").split())) for i in range(m)]

    if m != n:
        print("La matriz no es simétrica porque no es cuadrada.")
        return

    for i in range(m):
        for j in range(i + 1, n):
            if matriz[i][j] != matriz[j][i]:
                print("La matriz no es simétrica.")
                return

    print("La matriz es simétrica.")

#  Menu
def mostrar_menu():
    print("\nMenú de Opciones:")
    print("1. Mostrar la cantidad de dígitos de un número entero")
    print("2. Mostrar la cantidad de dígitos enteros y decimales de un número decimal")
    print("3. Mostrar los números compuestos de un vector")
    print("4. Invertir un vector usando un vector auxiliar")
    print("5. Invertir un vector sin usar un vector auxiliar")
    print("6. Filtrar los elementos según condiciones de dígitos")
    print("7. Insertar K a la derecha de cada múltiplo de K en una lista")
    print("8. Calcular los promedios de cada fila y columna de una matriz")
    print("9. Almacenar elementos cuya factorial sea mayor o igual a la suma de la diagonal principal")
    print("10. Verificar si un elemento es un punto silla")
    print("11. Verificar si la matriz es simétrica")
    print("12. Salir")

# Programa principal
def main():
    while True:
        mostrar_menu()
        opcion = input("Seleccione una opción (1-12): ")

        if opcion == '1':
            mostrar_cantidad_digitos()

        elif opcion == '2':
            mostrar_cantidad_digitos_entero_decimal()

        elif opcion == '3':
            mostrar_numeros_compuestos()

        elif opcion == '4':
            invertir_vector_con_auxiliar()

        elif opcion == '5':
            invertir_vector_sin_auxiliar()

        elif opcion == '6':
            filtrar_elementos_por_digitos()

        elif opcion == '7':
            insertar_k_derecha_multiplo_k()

        elif opcion == '8':
            calcular_promedios_matriz()

        elif opcion == '9':
            almacenar_factorial_matriz()

        elif opcion == '10':
            verificar_punto_silla()

        elif opcion == '11':
            es_matriz_simetrica()

        elif opcion == '12':
            print("Saliendo del programa...")
            break

        else:
            print("Opción no válida, por favor intente de nuevo.")

# Ejecutar el programa
main()